{"version":3,"sources":["api/openweather.ts","styles/colors.ts","styles/common.ts","styles/headers.ts","utils/temperature.ts","utils/characters.ts","components/Temperature.tsx","components/WeatherIcons.tsx","components/CurrentWeather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["apiKey","baseUrl","getForCity","city","a","query","URL","searchParams","append","fetch","toString","response","json","body","getForCoordinates","lon","lat","colors","primaryTextColor","secondaryTextColor","Datetime","styled","span","H2","h2","kelvinToCelsius","temperature","weatherCharacters","celsius","fahrenheit","kelvin","Temperature","value","unit","useMemo","kelvinToFahrenheit","toFixed","WeatherIcon","props","weather","details","CurrentWeather","location","useState","setWeather","useEffect","coords","longitude","latitude","getWeather","Wrapper","Header","Date","dt","toLocaleString","main","size","name","temp","FeelsLike","feels_like","div","App","position","setPositionState","setPosition","useCallback","pos","navigator","geolocation","getCurrentPosition","err","console","error","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7ca4b204.chunk.js","sourcesContent":["const apiKey = 'a9de9f43a51c3d8468834371a221c8f3';\nconst baseUrl = 'https://api.openweathermap.org';\n\nconst currentWeatherPath = '/data/2.5/weather';\n\nexport async function getForCity(city: string): Promise<WeatherResponse> {\n\tconst query = new URL(baseUrl + currentWeatherPath);\n\tquery.searchParams.append('appid', apiKey);\n\tquery.searchParams.append('q', city);\n\n\tconst response = await fetch(query.toString());\n\tconst body = await response.json();\n\n\treturn body;\n}\n\nexport async function getForCoordinates(lon: number, lat: number): Promise<WeatherResponse> {\n\tconst query = new URL(baseUrl + currentWeatherPath);\n\tquery.searchParams.append('appid', apiKey);\n\tquery.searchParams.append('lat', lat.toString());\n\tquery.searchParams.append('lon', lon.toString());\n\n\tconst response = await fetch(query.toString());\n\tconst body = await response.json();\n\n\treturn body;\n}\n\nexport type MainWeather =\n\t| 'Thunderstorm'\n\t| 'Drizzle'\n\t| 'Rain'\n\t| 'Snow'\n\t| 'Clear'\n\t| 'Clouds'\n\t| 'Mist'\n\t| 'Smoke'\n\t| 'Haze'\n\t| 'Dust'\n\t| 'Fog'\n\t| 'Sand'\n\t| 'Dust'\n\t| 'Ash'\n\t| 'Squall'\n\t| 'Tornado';\n\ntype Clouds = 'few clouds' | 'scattered cloads' | 'broken clouds' | 'overcast clouds';\ntype Clear = 'clear sky';\ntype Snow =\n\t| 'light snow'\n\t| 'Snow'\n\t| 'Heavy snow'\n\t| 'Sleet'\n\t| 'Light shower sleet'\n\t| 'Shower sleet'\n\t| 'Light rain and snow'\n\t| 'Rain and snow'\n\t| 'Light shower snow'\n\t| 'Shower snow'\n\t| 'Heavy shower snow';\ntype Rain =\n\t| 'light rain'\n\t| 'moderate rain'\n\t| 'heavy intensity rain'\n\t| 'very heavy rain'\n\t| 'extreme rain'\n\t| 'freezing rain'\n\t| 'light intensity shower rain'\n\t| 'shower rain'\n\t| 'heavy intensity shower rain'\n\t| 'ragged shower rain';\ntype Drizzle =\n\t| 'light intensity drizzle'\n\t| 'drizzle'\n\t| 'heavy intensity drizzle'\n\t| 'light intensity drizzle rain'\n\t| 'drizzle rain'\n\t| 'heavy intensity drizzle rain'\n\t| 'shower rain and drizzle'\n\t| 'heavy shower rain and drizzle'\n\t| 'shower drizzle';\ntype Thunderstrom =\n\t| 'thunderstorm with light rain'\n\t| 'thundrestorm with rain'\n\t| 'thunderstorm with heavy rain'\n\t| 'light thunderstorm'\n\t| 'thunderstorm'\n\t| 'heavy thunderstorm'\n\t| 'ragged thunderstorm'\n\t| 'thunderstorm with light drizzle'\n\t| 'thunderstorm with drizzle'\n\t| 'thunderstorm with heavy drizzle';\n\nexport type WeatherDescription = Clouds | Clear | Snow | Rain | Drizzle | Thunderstrom;\n\n// See definition here: https://openweathermap.org/current\nexport interface WeatherResponse {\n\tcoord: { lon: number; lat: number };\n\tweather: {\n\t\tid: number;\n\t\tmain: MainWeather;\n\t\tdescription: string;\n\t\ticon: string;\n\t}[];\n\tbase: string;\n\tmain: {\n\t\t// Default unit: Kelvin\n\t\ttemp: number;\n\t\tfeels_like: number;\n\t\ttemp_min: number;\n\t\ttemp_max: number;\n\t\thumidity: number;\n\t\tpressure: number;\n\t};\n\tvisibility: number;\n\twind: {\n\t\tspeed: number; // m/s\n\t\tdeg: number; // meteorological direction\n\t};\n\tclouds: {\n\t\tall: number;\n\t};\n\tdt: number;\n\tsys: {\n\t\ttype: number;\n\t\tid: number;\n\t\tcountry: string;\n\t\tsunrise: number;\n\t\tsunset: number;\n\t};\n\ttimezone: number;\n\tid: number;\n\tname: string;\n\tcod: number;\n}\n","const colors = {\n\tprimaryTextColor: 'black',\n\tsecondaryTextColor: 'grey',\n};\n\nexport default colors;\n","import colors from './colors';\nimport styled from 'styled-components';\n\nexport const Datetime = styled.span`\n\tfont-size: 0.8em;\n\tcolor: ${colors.secondaryTextColor};\n`;\n","import styled from 'styled-components';\n\nexport const H2 = styled.h2`\n\tfont-size: 1.2em;\n\tpadding: 0;\n\tmargin: 0;\n`;\n","export function kelvinToCelsius(temperature: number): number {\n\treturn temperature - 273.15;\n}\n\nexport function kelvinToFahrenheit(temperature: number): number {\n\treturn kelvinToCelsius(temperature) * 1.8 + 32;\n}\n","export const weatherCharacters = {\n\tcelsius: '\\u2103',\n\tfahrenheit: '\\u2109',\n\tkelvin: '\\u212A',\n};\n","import React, { useMemo } from 'react';\nimport { kelvinToCelsius, kelvinToFahrenheit } from '../utils/temperature';\nimport { weatherCharacters } from '../utils/characters';\n\ninterface TemperatureProps {\n\tvalue: number;\n\tunit: 'kelvin' | 'celsius' | 'fahrenheit';\n}\n\nconst Temperature = ({ value, unit }: TemperatureProps) => {\n\tconst temperature = useMemo(() => {\n\t\tswitch (unit) {\n\t\t\tcase 'celsius':\n\t\t\t\treturn kelvinToCelsius(value);\n\t\t\tcase 'fahrenheit':\n\t\t\t\treturn kelvinToFahrenheit(value);\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}, [value, unit]);\n\n\treturn (\n\t\t<span>\n\t\t\t{temperature.toFixed(0)} {weatherCharacters[unit]}\n\t\t</span>\n\t);\n};\n\nexport default Temperature;\n","import React from 'react';\nimport { IoMdSunny, IoMdCloudy, IoMdRainy, IoMdThunderstorm, IoMdSnow, IoMdPartlySunny } from 'react-icons/io';\nimport { MainWeather, WeatherDescription } from '../api/openweather';\n\nexport const Sunny = () => {\n\treturn <IoMdSunny />;\n};\n\ninterface WeatherIconProps {\n\tweather: MainWeather;\n\tdetails?: WeatherDescription;\n\tsize?: number;\n\tcolor?: string;\n}\n\nconst WeatherIcon = (props: WeatherIconProps) => {\n\tconst { weather } = props;\n\tswitch (weather) {\n\t\tcase 'Clear':\n\t\t\treturn <IoMdSunny {...props} />;\n\t\tcase 'Clouds':\n\t\t\tif (props.details) {\n\t\t\t\tswitch (props.details) {\n\t\t\t\t\tcase 'few clouds':\n\t\t\t\t\tcase 'scattered cloads':\n\t\t\t\t\t\treturn <IoMdPartlySunny {...props} />;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn <IoMdCloudy {...props} />;\n\t\tcase 'Drizzle':\n\t\tcase 'Rain':\n\t\t\treturn <IoMdRainy {...props} />;\n\t\tcase 'Snow':\n\t\t\treturn <IoMdSnow {...props} />;\n\t\tcase 'Thunderstorm':\n\t\t\treturn <IoMdThunderstorm {...props} />;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n\nexport default WeatherIcon;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { getForCity, getForCoordinates, WeatherResponse } from '../api/openweather';\nimport { Datetime } from '../styles/common';\nimport { H2 } from '../styles/headers';\nimport Temperature from './Temperature';\nimport WeatherIcon from './WeatherIcons';\n\ninterface CurrentWeatherProps {\n\tlocation: string | Position;\n}\n\nexport const CurrentWeather = ({ location }: CurrentWeatherProps) => {\n\tconst [weather, setWeather] = useState<WeatherResponse | undefined>();\n\n\tuseEffect(() => {\n\t\tasync function getWeather() {\n\t\t\tif (typeof location === 'string') {\n\t\t\t\tsetWeather(await getForCity(location));\n\t\t\t} else {\n\t\t\t\tsetWeather(await getForCoordinates(location.coords.longitude, location.coords.latitude));\n\t\t\t}\n\t\t}\n\n\t\tgetWeather();\n\t}, [setWeather, location]);\n\n\tif (!weather) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Header>\n\t\t\t\t<div>\n\t\t\t\t\t<H2>Current weather</H2>\n\t\t\t\t\t<Datetime>{new Date(weather.dt * 1000).toLocaleString()}</Datetime>\n\t\t\t\t</div>\n\t\t\t\t<WeatherIcon weather={weather.weather[0].main} size={38} />\n\t\t\t</Header>\n\t\t\t<div>{weather.name}</div>\n\t\t\t<Temperature value={weather.main.temp} unit={'celsius'} />\n\t\t\t<FeelsLike>\n\t\t\t\tFeels like <Temperature value={weather.main.feels_like} unit={'celsius'} />\n\t\t\t</FeelsLike>\n\t\t</Wrapper>\n\t);\n};\n\nconst Wrapper = styled.div`\n\tborder: 1px solid grey;\n\tborder-radius: 5px;\n\tmargin: 20px;\n\tpadding: 6px;\n\tmax-width: 400px;\n`;\n\nconst Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst FeelsLike = styled.div`\n\tfont-size: 0.8em;\n`;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { CurrentWeather } from './components/CurrentWeather';\n\nfunction App() {\n\tconst [position, setPositionState] = useState<Position | string | undefined>();\n\n\tconst setPosition = useCallback((pos: Position) => {\n\t\tsetPositionState(pos);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tnavigator.geolocation.getCurrentPosition(setPosition, (err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}, [setPosition]);\n\n\tif (!position) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<CurrentWeather location={position} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}